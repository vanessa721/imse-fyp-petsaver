{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TabBarIcon from \"./TabBarIcon\";\nexport default function BottomTabBarItem(_ref) {\n  var focused = _ref.focused,\n      route = _ref.route,\n      label = _ref.label,\n      icon = _ref.icon,\n      badge = _ref.badge,\n      badgeStyle = _ref.badgeStyle,\n      to = _ref.to,\n      _ref$button = _ref.button,\n      button = _ref$button === void 0 ? function (_ref2) {\n    var children = _ref2.children,\n        style = _ref2.style,\n        _onPress = _ref2.onPress,\n        to = _ref2.to,\n        accessibilityRole = _ref2.accessibilityRole,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n\n    if (Platform.OS === 'web' && to) {\n      return React.createElement(Link, _extends({}, rest, {\n        to: to,\n        style: [styles.button, style],\n        onPress: function onPress(e) {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n            e.preventDefault();\n            _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n          }\n        }\n      }), children);\n    } else {\n      return React.createElement(Pressable, _extends({}, rest, {\n        accessibilityRole: accessibilityRole,\n        onPress: _onPress,\n        style: style\n      }), children);\n    }\n  } : _ref$button,\n      accessibilityLabel = _ref.accessibilityLabel,\n      testID = _ref.testID,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      horizontal = _ref.horizontal,\n      customActiveTintColor = _ref.activeTintColor,\n      customInactiveTintColor = _ref.inactiveTintColor,\n      _ref$activeBackground = _ref.activeBackgroundColor,\n      activeBackgroundColor = _ref$activeBackground === void 0 ? 'transparent' : _ref$activeBackground,\n      _ref$inactiveBackgrou = _ref.inactiveBackgroundColor,\n      inactiveBackgroundColor = _ref$inactiveBackgrou === void 0 ? 'transparent' : _ref$inactiveBackgrou,\n      _ref$showLabel = _ref.showLabel,\n      showLabel = _ref$showLabel === void 0 ? true : _ref$showLabel,\n      allowFontScaling = _ref.allowFontScaling,\n      labelStyle = _ref.labelStyle,\n      iconStyle = _ref.iconStyle,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  var inactiveTintColor = customInactiveTintColor === undefined ? Color(colors.text).mix(Color(colors.card), 0.5).hex() : customInactiveTintColor;\n\n  var renderLabel = function renderLabel(_ref3) {\n    var focused = _ref3.focused;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    var color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling\n      }, label);\n    }\n\n    return label({\n      focused: focused,\n      color: color,\n      position: horizontal ? 'beside-icon' : 'below-icon'\n    });\n  };\n\n  var renderIcon = function renderIcon(_ref4) {\n    var focused = _ref4.focused;\n\n    if (icon === undefined) {\n      return null;\n    }\n\n    var activeOpacity = focused ? 1 : 0;\n    var inactiveOpacity = focused ? 0 : 1;\n    return React.createElement(TabBarIcon, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      badgeStyle: badgeStyle,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle\n    });\n  };\n\n  var scene = {\n    route: route,\n    focused: focused\n  };\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to: to,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: Platform.select({\n      ios: 'button',\n      default: 'tab'\n    }),\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor: backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: React.createElement(React.Fragment, null, renderIcon(scene), renderLabel(scene))\n  });\n}\nvar styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"mappings":"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","names":["Link","useTheme","Color","React","TabBarIcon","BottomTabBarItem","focused","route","label","icon","badge","badgeStyle","to","button","children","style","onPress","accessibilityRole","rest","Platform","OS","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","Pressable","accessibilityLabel","testID","onLongPress","horizontal","customActiveTintColor","activeTintColor","customInactiveTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","Text","numberOfLines","labelBeside","labelBeneath","position","renderIcon","activeOpacity","inactiveOpacity","scene","backgroundColor","select","ios","default","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","Fragment","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","textAlign","fontSize","marginLeft","marginTop","display"],"sources":["BottomTabItem.tsx"],"sourcesContent":["import { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\nimport TabBarIcon from './TabBarIcon';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <Pressable\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n          style={style}\n        >\n          {children}\n        </Pressable>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    // FIXME: accessibilityRole: 'tab' doesn't seem to work as expected on iOS\n    accessibilityRole: Platform.select({ ios: 'button', default: 'tab' }),\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}