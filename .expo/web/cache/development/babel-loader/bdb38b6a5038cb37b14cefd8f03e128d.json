{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ExpoDocumentPicker from \"./ExpoDocumentPicker\";\nexport function getDocumentAsync() {\n  var _ref,\n      _ref$type,\n      type,\n      _ref$copyToCacheDirec,\n      copyToCacheDirectory,\n      _ref$multiple,\n      multiple,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function getDocumentAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref$type = _ref.type, type = _ref$type === void 0 ? '*/*' : _ref$type, _ref$copyToCacheDirec = _ref.copyToCacheDirectory, copyToCacheDirectory = _ref$copyToCacheDirec === void 0 ? true : _ref$copyToCacheDirec, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n\n          if (typeof type === 'string') {\n            type = [type];\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDocumentPicker.getDocumentAsync({\n            type: type,\n            copyToCacheDirectory: copyToCacheDirectory,\n            multiple: multiple\n          }));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,OAAO,kBAAP;AAgBA,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yEAIoB,EAJpB,mBACL,IADK,EACL,IADK,0BACE,KADF,2CAEL,oBAFK,EAEL,oBAFK,sCAEkB,IAFlB,+CAGL,QAHK,EAGL,QAHK,8BAGM,KAHN;;AAKL,cAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAA,IAAI,GAAG,CAAC,IAAD,CAAP;AACD;;AAPI;AAAA,2CAQQ,kBAAkB,CAAC,gBAAnB,CAAoC;AAAE,YAAA,IAAI,EAAJ,IAAF;AAAQ,YAAA,oBAAoB,EAApB,oBAAR;AAA8B,YAAA,QAAQ,EAAR;AAA9B,WAApC,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import ExpoDocumentPicker from './ExpoDocumentPicker';\nimport { DocumentPickerOptions, DocumentResult } from './types';\nexport { DocumentPickerOptions, DocumentResult };\n\n// @needsAudit\n/**\n * Display the system UI for choosing a document. By default, the chosen file is copied to [the app's internal cache directory](filesystem.md#filesystemcachedirectory).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `getDocumentAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancel` event will not be returned in the browser due to platform restrictions and\n * inconsistencies across browsers.\n *\n * @return On success returns a promise that fulfils with [`DocumentResult`](#documentresult) object.\n *\n * If the user cancelled the document picking, the promise resolves to `{ type: 'cancel' }`.\n */\nexport async function getDocumentAsync({\n  type = '*/*',\n  copyToCacheDirectory = true,\n  multiple = false,\n}: DocumentPickerOptions = {}): Promise<DocumentResult> {\n  if (typeof type === 'string') {\n    type = [type] as string[];\n  }\n  return await ExpoDocumentPicker.getDocumentAsync({ type, copyToCacheDirectory, multiple });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}