{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PetCard } from \"../components/PetCard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ref, getDownloadURL } from \"firebase/storage\";\nimport { collection, query, onSnapshot, orderBy } from \"firebase/firestore\";\nimport React, { useEffect, useState } from 'react';\nimport { storage, db } from \"../firebase\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function PetCardFlatList(filter) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      petPostDataArray = _useState2[0],\n      setpetPostDataArray = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var getData = function getData() {\n    var q, unsubscribe;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"filter\", filter);\n\n            if (Object.keys(filter).length === 0) {\n              q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"), filter);\n            } else {\n              q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"));\n            }\n\n            unsubscribe = onSnapshot(q, function (querySnapshot) {\n              setpetPostDataArray([]);\n              querySnapshot.forEach(function (doc) {\n                getDownloadURL(ref(storage, doc.data()['imagepath'])).then(function (url) {\n                  console.log(\"petname:\" + doc.data()['petname'] + \" \" + doc.data()['createdate'].toDate());\n                  var newjson = {\n                    id: doc.id,\n                    imagepath: url,\n                    petname: doc.data()['petname'],\n                    petgender: doc.data()['petgender'],\n                    petstages: doc.data()['petstages'],\n                    desc: doc.data()['desc']\n                  };\n                  setpetPostDataArray(function (oldArray) {\n                    return [].concat(_toConsumableArray(oldArray), [newjson]);\n                  });\n                }).catch(function (error) {});\n              });\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getData();\n    setIsLoading(false);\n  }, []);\n  return _jsxs(_Fragment, {\n    children: [isLoading && _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#298e96\"\n    }), _jsx(View, {\n      style: styles.uppergadient,\n      children: _jsx(LinearGradient, {\n        colors: ['rgba(255,255,255,1)', 'rgba(0,255,255,0)'],\n        style: {\n          height: 40\n        }\n      })\n    }), _jsx(FlatList, {\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      data: petPostDataArray,\n      renderItem: PetCard,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    }), _jsx(View, {\n      style: styles.lowergadient,\n      children: _jsx(LinearGradient, {\n        colors: ['rgba(255,255,255,0)', 'rgba(255,255,255,1)'],\n        style: {\n          height: 40\n        }\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  uppergadient: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    top: 0,\n    width: '100%',\n    height: 40,\n    zIndex: 10\n  },\n  lowergadient: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    height: 40\n  }\n});","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/components/PetCardFlatList.tsx"],"names":["PetCard","ref","getDownloadURL","collection","query","onSnapshot","orderBy","React","useEffect","useState","storage","db","LinearGradient","PetCardFlatList","filter","petPostDataArray","setpetPostDataArray","isLoading","setIsLoading","getData","console","log","Object","keys","length","q","unsubscribe","querySnapshot","forEach","doc","data","then","url","toDate","newjson","id","imagepath","petname","petgender","petstages","desc","oldArray","catch","error","styles","uppergadient","height","item","lowergadient","StyleSheet","create","flex","backgroundColor","top","width","zIndex","position","bottom"],"mappings":"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","sourcesContent":["import { PetCard } from '../components/PetCard';\r\nimport { StyleSheet, FlatList, ActivityIndicator, View } from 'react-native';\r\nimport { ref, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, query, where, onSnapshot, getDocs, orderBy, limit } from \"firebase/firestore\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingStackProps, petPostDataProps } from '../types';\r\nimport { storage, db } from \"../firebase\";\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nexport function PetCardFlatList(filter: any) {\r\n    const [petPostDataArray, setpetPostDataArray] = useState<petPostDataProps[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const getData = async () => {\r\n        console.log(\"filter\", filter)\r\n        if (Object.keys(filter).length === 0) {\r\n            var q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"), filter);\r\n\r\n        } else {\r\n            var q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"));\r\n        }\r\n\r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            setpetPostDataArray([])\r\n            querySnapshot.forEach((doc) => {\r\n                getDownloadURL(ref(storage, doc.data()['imagepath']))\r\n                    .then((url) => {\r\n                        console.log(\"petname:\" + doc.data()['petname'] + \" \" + (doc.data()['createdate']).toDate())\r\n                        const newjson = {\r\n                            id: doc.id,\r\n                            imagepath: url,\r\n                            petname: doc.data()['petname'],\r\n                            petgender: doc.data()['petgender'],\r\n                            petstages: doc.data()['petstages'],\r\n                            desc: doc.data()['desc']\r\n                        }\r\n                        //console.log(doc.data()['createdate'], newjson);\r\n                        setpetPostDataArray(oldArray => [...oldArray, newjson]);\r\n                    })\r\n                    .catch((error) => {\r\n                    });\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        setIsLoading(false)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <ActivityIndicator size=\"large\" color='#298e96' />}\r\n            <View style={styles.uppergadient}>\r\n                <LinearGradient\r\n                    colors={['rgba(255,255,255,1)', 'rgba(0,255,255,0)']}\r\n                    style={{ height: 40 }}\r\n                />\r\n            </View>\r\n            <FlatList\r\n                showsVerticalScrollIndicator={false}\r\n                showsHorizontalScrollIndicator={false}\r\n                data={petPostDataArray}\r\n                renderItem={PetCard}\r\n                keyExtractor={item => item.id}\r\n            />\r\n            <View style={styles.lowergadient}>\r\n                <LinearGradient\r\n                    colors={['rgba(255,255,255,0)', 'rgba(255,255,255,1)']}\r\n                    style={{ height: 40 }}\r\n                />\r\n            </View>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    uppergadient: {\r\n        flex: 1,\r\n        backgroundColor: 'transparent',\r\n        top: 0,\r\n        width: '100%',\r\n        height: 40,\r\n        zIndex: 10\r\n    },\r\n    lowergadient: {\r\n        flex: 1,\r\n        backgroundColor: 'transparent',\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        width: '100%',\r\n        height: 40\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}