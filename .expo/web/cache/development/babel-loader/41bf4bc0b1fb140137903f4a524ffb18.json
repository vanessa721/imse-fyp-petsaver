{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  get name() {\n    return 'ExpoDocumentPicker';\n  },\n\n  getDocumentAsync: function getDocumentAsync(_ref) {\n    return function _callee() {\n      var _ref$type, type, _ref$multiple, multiple, input;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$type = _ref.type, type = _ref$type === void 0 ? '*/*' : _ref$type, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n\n              if (Platform.isDOMAvailable) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                type: 'cancel'\n              });\n\n            case 3:\n              input = document.createElement('input');\n              input.style.display = 'none';\n              input.setAttribute('type', 'file');\n              input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n              input.setAttribute('id', uuidv4());\n\n              if (multiple) {\n                input.setAttribute('multiple', 'multiple');\n              }\n\n              document.body.appendChild(input);\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                input.addEventListener('change', function () {\n                  if (input.files) {\n                    var targetFile = input.files[0];\n                    var mimeType = targetFile.type;\n                    var reader = new FileReader();\n\n                    reader.onerror = function () {\n                      reject(new Error(\"Failed to read the selected media because the operation failed.\"));\n                    };\n\n                    reader.onload = function (_ref2) {\n                      var target = _ref2.target;\n                      var uri = target.result;\n                      resolve({\n                        type: 'success',\n                        uri: uri,\n                        mimeType: mimeType,\n                        name: targetFile.name,\n                        file: targetFile,\n                        lastModified: targetFile.lastModified,\n                        size: targetFile.size,\n                        output: input.files\n                      });\n                    };\n\n                    reader.readAsDataURL(targetFile);\n                  } else {\n                    resolve({\n                      type: 'cancel'\n                    });\n                  }\n\n                  document.body.removeChild(input);\n                });\n                var event = new MouseEvent('click');\n                input.dispatchEvent(event);\n              }));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"sources":["../src/ExpoDocumentPicker.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,EAAE,IAAI,MAAf,QAA6B,MAA7B;AAIA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,oBAAP;AACD,GAHY;;AAKP,EAAA,gBALO,kCAQW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFtB,IAEsB,EAFtB,IAEsB,0BAFf,KAEe,mCADtB,QACsB,EADtB,QACsB,8BADX,KACW;;AAAA,kBAEjB,QAAQ,CAAC,cAFQ;AAAA;AAAA;AAAA;;AAAA,+CAGb;AAAE,gBAAA,IAAI,EAAE;AAAR,eAHa;;AAAA;AAMhB,cAAA,KANgB,GAMR,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CANQ;AAOtB,cAAA,KAAK,CAAC,KAAN,CAAY,OAAZ,GAAsB,MAAtB;AACA,cAAA,KAAK,CAAC,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;AACA,cAAA,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA6B,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,IAAI,CAAC,IAAL,CAAU,GAAV,CAAtB,GAAuC,IAApE;AACA,cAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB,MAAM,EAA/B;;AACA,kBAAI,QAAJ,EAAc;AACZ,gBAAA,KAAK,CAAC,YAAN,CAAmB,UAAnB,EAA+B,UAA/B;AACD;;AAED,cAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAA1B;AAfsB,+CAiBf,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,gBAAA,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,YAAK;AACpC,sBAAI,KAAK,CAAC,KAAV,EAAiB;AACf,wBAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAnB;AACA,wBAAM,QAAQ,GAAG,UAAU,CAAC,IAA5B;AACA,wBAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,oBAAA,MAAM,CAAC,OAAP,GAAiB,YAAK;AACpB,sBAAA,MAAM,CAAC,IAAI,KAAJ,mEAAD,CAAN;AACD,qBAFD;;AAGA,oBAAA,MAAM,CAAC,MAAP,GAAgB,iBAAe;AAAA,0BAAZ,MAAY,SAAZ,MAAY;AAC7B,0BAAM,GAAG,GAAI,MAAc,CAAC,MAA5B;AACA,sBAAA,OAAO,CAAC;AACN,wBAAA,IAAI,EAAE,SADA;AAEN,wBAAA,GAAG,EAAH,GAFM;AAGN,wBAAA,QAAQ,EAAR,QAHM;AAIN,wBAAA,IAAI,EAAE,UAAU,CAAC,IAJX;AAKN,wBAAA,IAAI,EAAE,UALA;AAMN,wBAAA,YAAY,EAAE,UAAU,CAAC,YANnB;AAON,wBAAA,IAAI,EAAE,UAAU,CAAC,IAPX;AAQN,wBAAA,MAAM,EAAE,KAAK,CAAC;AARR,uBAAD,CAAP;AAUD,qBAZD;;AAcA,oBAAA,MAAM,CAAC,aAAP,CAAqB,UAArB;AACD,mBAtBD,MAsBO;AACL,oBAAA,OAAO,CAAC;AAAE,sBAAA,IAAI,EAAE;AAAR,qBAAD,CAAP;AACD;;AAED,kBAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAA1B;AACD,iBA5BD;AA8BA,oBAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAd;AACA,gBAAA,KAAK,CAAC,aAAN,CAAoB,KAApB;AACD,eAjCM,CAjBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmDvB;AA3DY,CAAf","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DocumentPickerOptions, DocumentResult } from './types';\n\nexport default {\n  get name(): string {\n    return 'ExpoDocumentPicker';\n  },\n\n  async getDocumentAsync({\n    type = '*/*',\n    multiple = false,\n  }: DocumentPickerOptions): Promise<DocumentResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { type: 'cancel' };\n    }\n\n    const input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n    input.setAttribute('id', uuidv4());\n    if (multiple) {\n      input.setAttribute('multiple', 'multiple');\n    }\n\n    document.body.appendChild(input);\n\n    return new Promise((resolve, reject) => {\n      input.addEventListener('change', () => {\n        if (input.files) {\n          const targetFile = input.files[0];\n          const mimeType = targetFile.type;\n          const reader = new FileReader();\n          reader.onerror = () => {\n            reject(new Error(`Failed to read the selected media because the operation failed.`));\n          };\n          reader.onload = ({ target }) => {\n            const uri = (target as any).result;\n            resolve({\n              type: 'success',\n              uri,\n              mimeType,\n              name: targetFile.name,\n              file: targetFile,\n              lastModified: targetFile.lastModified,\n              size: targetFile.size,\n              output: input.files,\n            });\n          };\n          // Read in the image file as a binary string.\n          reader.readAsDataURL(targetFile);\n        } else {\n          resolve({ type: 'cancel' });\n        }\n\n        document.body.removeChild(input);\n      });\n\n      const event = new MouseEvent('click');\n      input.dispatchEvent(event);\n    });\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}