{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport AppIntroSlider from 'react-native-app-intro-slider';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport LinkingConfiguration from \"./navigation/LinkingConfiguration\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport RootScreen from \"./screens/RootScreen\";\nimport { agreementTxt } from \"./assets/asset\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nLogBox.ignoreLogs(['']);\nvar Stack = createNativeStackNavigator();\n\nfunction checkIsWeb() {\n  return Platform.OS === 'ios' || Platform.OS === 'android' ? false : true;\n}\n\nexport default function App() {\n  var isLoadingComplete = useCachedResources();\n  var colorScheme = useColorScheme();\n\n  var _useState = useState(function () {\n    return checkIsWeb();\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      showRealApp = _useState2[0],\n      setShowRealApp = _useState2[1];\n\n  var onDone = function onDone() {\n    setShowRealApp(true);\n  };\n\n  var onSkip = function onSkip() {\n    setShowRealApp(true);\n  };\n\n  var RenderSliderItem = function RenderSliderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(_Fragment, {\n      children: item.key != 4 ? _jsx(View, {\n        style: {\n          flex: 1,\n          backgroundColor: item.backgroundColor,\n          alignItems: 'center',\n          justifyContent: 'space-around'\n        },\n        children: _jsx(Image, {\n          style: {\n            height: '100%',\n            width: '100%',\n            resizeMode: 'stretch'\n          },\n          source: item.image\n        })\n      }) : _jsxs(View, {\n        style: {\n          flex: 1,\n          backgroundColor: 'white',\n          alignItems: 'center',\n          justifyContent: 'space-around',\n          padding: 20,\n          paddingTop: 60,\n          paddingBottom: 100\n        },\n        children: [_jsx(Text, {\n          style: {\n            fontWeight: 'bold',\n            fontSize: 22,\n            textDecorationColor: '#0a9396',\n            textDecorationLine: 'underline'\n          },\n          children: \"Privacy Policy and Personal Information Collection Statement \"\n        }), _jsx(ScrollView, {\n          children: _jsxs(Text, {\n            children: [\" \", agreementTxt]\n          })\n        })]\n      })\n    });\n  };\n\n  if (!isLoadingComplete) {\n    return null;\n  }\n\n  return _jsx(_Fragment, {\n    children: showRealApp ? _jsxs(SafeAreaProvider, {\n      children: [_jsx(StatusBar, {}), _jsx(NavigationContainer, {\n        linking: LinkingConfiguration,\n        children: _jsxs(Stack.Navigator, {\n          children: [_jsx(Stack.Screen, {\n            options: {\n              headerShown: false\n            },\n            name: \"Login\",\n            component: LoginScreen\n          }), _jsx(Stack.Screen, {\n            options: {\n              headerShown: false\n            },\n            name: \"Root\",\n            component: RootScreen\n          })]\n        })\n      })]\n    }) : _jsx(AppIntroSlider, {\n      data: slides,\n      renderItem: RenderSliderItem,\n      onDone: onDone,\n      onSkip: onSkip\n    })\n  });\n}\nvar slides = [{\n  key: 1,\n  title: 'Title 1',\n  text: 'Description.\\nSay something cool',\n  image: require(\"./assets/intro_screen/firstpage.png\"),\n  backgroundColor: 'white'\n}, {\n  key: 4,\n  title: 'Privacy Policy and Personal Information Collection Statement'\n}];\nvar styles = StyleSheet.create({\n  buttonCircle: {\n    width: 40,\n    height: 40,\n    backgroundColor: 'rgba(0, 0, 0, .2)',\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/App.tsx"],"names":["StatusBar","SafeAreaProvider","useCachedResources","useColorScheme","React","useState","AppIntroSlider","NavigationContainer","createNativeStackNavigator","LinkingConfiguration","LoginScreen","RootScreen","agreementTxt","LogBox","ignoreLogs","Stack","checkIsWeb","Platform","OS","App","isLoadingComplete","colorScheme","showRealApp","setShowRealApp","onDone","onSkip","RenderSliderItem","item","key","flex","backgroundColor","alignItems","justifyContent","height","width","resizeMode","image","padding","paddingTop","paddingBottom","fontWeight","fontSize","textDecorationColor","textDecorationLine","headerShown","slides","title","text","require","styles","StyleSheet","create","buttonCircle","borderRadius"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\r\n\r\nimport useCachedResources from './hooks/useCachedResources';\r\nimport useColorScheme from './hooks/useColorScheme';\r\n\r\nimport React, { useState } from 'react';\r\nimport { Platform, StyleSheet, View, Text, Image, LogBox, ScrollView } from 'react-native';\r\nimport AppIntroSlider from 'react-native-app-intro-slider';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport LinkingConfiguration from './navigation/LinkingConfiguration';\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport RootScreen from './screens/RootScreen';\r\nimport { agreementTxt } from './assets/asset';\r\n\r\nLogBox.ignoreLogs(['']);\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nfunction checkIsWeb() {\r\n  return (Platform.OS === 'ios' || Platform.OS === 'android') ? false : true;\r\n  //for dev testing \r\n  //return true \r\n}\r\n\r\n\r\nexport default function App() {\r\n  const isLoadingComplete = useCachedResources();\r\n  const colorScheme = useColorScheme();\r\n  const [showRealApp, setShowRealApp] = useState(() => checkIsWeb());\r\n\r\n  const onDone = () => {\r\n    setShowRealApp(true);\r\n  };\r\n\r\n  const onSkip = () => {\r\n    setShowRealApp(true);\r\n  };\r\n\r\n\r\n  const RenderSliderItem = ({ item }: { item: any }) => {\r\n    return (\r\n      <>\r\n        {item.key != 4 ?\r\n          <View\r\n            style={{\r\n              flex: 1,\r\n              backgroundColor: item.backgroundColor,\r\n              alignItems: 'center',\r\n              justifyContent: 'space-around',\r\n            }}>\r\n            <Image style={{ height: '100%', width: '100%', resizeMode: 'stretch' }} source={item.image} />\r\n          </View> :\r\n          <View\r\n            style={{\r\n              flex: 1,\r\n              backgroundColor: 'white',\r\n              alignItems: 'center',\r\n              justifyContent: 'space-around',\r\n              padding: 20,\r\n              paddingTop: 60,\r\n              paddingBottom: 100,\r\n            }}>\r\n            <Text style={{\r\n              fontWeight: 'bold', fontSize: 22,\r\n              textDecorationColor: '#0a9396', textDecorationLine: 'underline'\r\n            }}>Privacy Policy and Personal Information Collection Statement </Text>\r\n            {/* <Text style={{\r\n              fontWeight: 'bold', fontSize: 22,\r\n              textDecorationColor: '#0a9396', textDecorationLine: 'underline',\r\n            }}></Text> */}\r\n\r\n            <ScrollView>\r\n              <Text> {agreementTxt}</Text>\r\n            </ScrollView>\r\n\r\n          </View>\r\n        }\r\n      </>\r\n\r\n\r\n    );\r\n  };\r\n\r\n\r\n  if (!isLoadingComplete) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      {/* <SafeAreaProvider>\r\n        <StatusBar />\r\n        <NavigationContainer\r\n          linking={LinkingConfiguration}>\r\n          <Stack.Navigator>\r\n            <Stack.Screen options={{ headerShown: false }} name=\"Login\" component={LoginScreen}></Stack.Screen>\r\n            <Stack.Screen options={{ headerShown: false }} name=\"Root\" component={RootScreen}></Stack.Screen>\r\n          </Stack.Navigator>\r\n        </NavigationContainer>\r\n\r\n      </SafeAreaProvider> */}\r\n      {showRealApp ? (\r\n        <SafeAreaProvider>\r\n          <StatusBar />\r\n          <NavigationContainer\r\n            linking={LinkingConfiguration}>\r\n            <Stack.Navigator>\r\n              <Stack.Screen options={{ headerShown: false }} name=\"Login\" component={LoginScreen}></Stack.Screen>\r\n              <Stack.Screen options={{ headerShown: false }} name=\"Root\" component={RootScreen}></Stack.Screen>\r\n            </Stack.Navigator>\r\n          </NavigationContainer>\r\n\r\n        </SafeAreaProvider>\r\n      ) : (\r\n        <AppIntroSlider\r\n          data={slides}\r\n          renderItem={RenderSliderItem}\r\n          onDone={onDone}\r\n          onSkip={onSkip}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nconst slides = [\r\n  {\r\n    key: 1,\r\n    title: 'Title 1',\r\n    text: 'Description.\\nSay something cool',\r\n    image: require('./assets/intro_screen/firstpage.png'),\r\n    backgroundColor: 'white',\r\n  },\r\n  {\r\n    key: 4,\r\n    title: 'Privacy Policy and Personal Information Collection Statement',\r\n  }\r\n];\r\n\r\nconst styles = StyleSheet.create({\r\n  buttonCircle: {\r\n    width: 40,\r\n    height: 40,\r\n    backgroundColor: 'rgba(0, 0, 0, .2)',\r\n    borderRadius: 20,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}