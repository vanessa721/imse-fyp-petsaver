{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text, Input } from 'react-native-elements';\nimport { storage, db } from \"../firebase\";\nimport React, { useEffect, useState } from 'react';\nimport { ref, getDownloadURL } from \"firebase/storage\";\nimport { collection, query, getDocs } from \"firebase/firestore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreatePostScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageUrl = _useState2[0],\n      setImageUrl = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      petPostDataArray = _useState4[0],\n      setpetPostDataArray = _useState4[1];\n\n  var getData = function getData() {\n    var querySnapshot;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getDocs(collection(db, \"PetPost\")));\n\n          case 2:\n            querySnapshot = _context.sent;\n            querySnapshot.forEach(function (doc) {\n              console.log(doc.id, \" => \", doc.data());\n              getDownloadURL(ref(storage, doc.data()['imagepath'])).then(function (url) {\n                var newjson = {\n                  id: doc.id,\n                  imagepath: url,\n                  petname: doc.data()['petname'],\n                  petgender: doc.data()['petgender'],\n                  petstages: doc.data()['petstages'],\n                  desc: doc.data()['desc']\n                };\n                setpetPostDataArray(function (oldArray) {\n                  return [].concat(_toConsumableArray(oldArray), [newjson]);\n                });\n              }).catch(function (error) {});\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n  var q = query(collection(db, \"PetPost\"));\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"CreatePostScreen\"\n    }), _jsx(View, {\n      style: styles.separator\n    }), _jsx(Input, {\n      style: styles.input,\n      placeholder: \"Email\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  input: {\n    fontSize: 12\n  },\n  CardContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'flex-start',\n    borderRadius: 25,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: '#dddddd',\n    marginVertical: 15\n  },\n  imageitem: {\n    aspectRatio: 0.95,\n    width: 100,\n    borderRadius: 25\n  }\n});","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/screens/CreatePostScreen.tsx"],"names":["Text","Input","storage","db","React","useEffect","useState","ref","getDownloadURL","collection","query","getDocs","CreatePostScreen","navigation","imageUrl","setImageUrl","petPostDataArray","setpetPostDataArray","getData","querySnapshot","forEach","doc","console","log","id","data","then","url","newjson","imagepath","petname","petgender","petstages","desc","oldArray","catch","error","q","styles","container","title","separator","input","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","marginVertical","height","width","CardContainer","flexDirection","flexWrap","borderRadius","padding","borderWidth","borderColor","imageitem","aspectRatio"],"mappings":"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","sourcesContent":["import { StyleSheet, View, Image } from 'react-native';\nimport { auth } from \"../firebase\";\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { SettingStackProps, petPostDataProps } from '../types';\nimport { Button, ButtonGroup, withTheme, Text, Input } from 'react-native-elements';\nimport { storage, db } from \"../firebase\";\nimport React, { useEffect, useState } from 'react';\nimport { ref, getDownloadURL } from \"firebase/storage\";\nimport { collection, query, where, onSnapshot, getDocs } from \"firebase/firestore\";\n\n\nexport default function CreatePostScreen({ navigation }: SettingStackProps<'Setting'>) {\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [petPostDataArray, setpetPostDataArray] = useState<petPostDataProps[]>([]);\n  //gs://petsaver-1fa7d.appspot.com/petImages/cat.png\n\n  const getData = async () => {\n    const querySnapshot = await getDocs(collection(db, \"PetPost\"));\n    querySnapshot.forEach((doc) => {\n      console.log(doc.id, \" => \", doc.data());\n      getDownloadURL(ref(storage, doc.data()['imagepath']))\n        .then((url) => {\n          const newjson = {\n            id: doc.id,\n            imagepath: url,\n            petname: doc.data()['petname'],\n            petgender: doc.data()['petgender'],\n            petstages: doc.data()['petstages'],\n            desc: doc.data()['desc']\n          }\n          setpetPostDataArray(oldArray => [...oldArray, newjson]);\n\n        })\n        .catch((error) => {\n          // Handle any errors\n        });\n\n    });\n\n  }\n\n  useEffect(() => {\n    getData()\n  }, []);\n\n\n\n  const q = query(collection(db, \"PetPost\"));\n\n\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>CreatePostScreen</Text>\n      <View style={styles.separator} />\n      <Input style={styles.input} placeholder='Email' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  input: {\n    fontSize: 12\n  },\n  CardContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'flex-start', // if you want to fill rows left to right\n    borderRadius: 25,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: '#dddddd',\n    marginVertical: 15,\n  },\n  imageitem: {\n    aspectRatio: 0.95,\n    width: 100,\n    borderRadius: 25,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}