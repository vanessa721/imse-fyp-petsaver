{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState, useCallback } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar screen = Dimensions.get('window');\nexport function useDeviceOrientation() {\n  var isOrientationPortrait = function isOrientationPortrait(_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return height >= width;\n  };\n\n  var isOrientationLandscape = function isOrientationLandscape(_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= height;\n  };\n\n  var _useState = useState({\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen)\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      orientation = _useState2[0],\n      setOrientation = _useState2[1];\n\n  var onChange = useCallback(function (screen) {\n    setOrientation({\n      portrait: isOrientationPortrait(screen),\n      landscape: isOrientationLandscape(screen)\n    });\n  }, []);\n  useEffect(function () {\n    var susbcription = Dimensions.addEventListener('change', function () {\n      var screen = Dimensions.get('window');\n      onChange(screen);\n    });\n    return function () {\n      if (susbcription != null && susbcription.remove) {\n        susbcription.remove();\n      } else {\n        Dimensions.removeEventListener('change', function () {\n          var screen = Dimensions.get('window');\n          onChange(screen);\n        });\n      }\n    };\n  }, []);\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/node_modules/react-native-element-dropdown/src/useDeviceOrientation.ts"],"names":["useEffect","useState","useCallback","screen","Dimensions","get","useDeviceOrientation","isOrientationPortrait","width","height","isOrientationLandscape","portrait","landscape","orientation","setOrientation","onChange","susbcription","addEventListener","remove","removeEventListener"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,QAAiD,OAAjD;;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AAEA,OAAO,SAASC,oBAAT,GAAgC;AACrC,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,QAC5BC,KAD4B,QAC5BA,KAD4B;AAAA,QAE5BC,MAF4B,QAE5BA,MAF4B;AAAA,WAMxBA,MAAM,IAAID,KANc;AAAA,GAA9B;;AAOA,MAAME,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA,QAC7BF,KAD6B,SAC7BA,KAD6B;AAAA,QAE7BC,MAF6B,SAE7BA,MAF6B;AAAA,WAMzBD,KAAK,IAAIC,MANgB;AAAA,GAA/B;;AAQA,kBAAsCR,QAAQ,CAAC;AAC7CU,IAAAA,QAAQ,EAAEJ,qBAAqB,CAACJ,MAAD,CADc;AAE7CS,IAAAA,SAAS,EAAEF,sBAAsB,CAACP,MAAD;AAFY,GAAD,CAA9C;AAAA;AAAA,MAAOU,WAAP;AAAA,MAAoBC,cAApB;;AAKA,MAAMC,QAAQ,GAAGb,WAAW,CAAC,UAACC,MAAD,EAAY;AACvCW,IAAAA,cAAc,CAAC;AACbH,MAAAA,QAAQ,EAAEJ,qBAAqB,CAACJ,MAAD,CADlB;AAEbS,MAAAA,SAAS,EAAEF,sBAAsB,CAACP,MAAD;AAFpB,KAAD,CAAd;AAID,GAL2B,EAKzB,EALyB,CAA5B;AAOAH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,YAAY,GAAGZ,UAAU,CAACa,gBAAX,CAA4B,QAA5B,EAAsC,YAAM;AAC/D,UAAMd,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACAU,MAAAA,QAAQ,CAACZ,MAAD,CAAR;AACD,KAHoB,CAArB;AAKA,WAAO,YAAM;AACX,UAAGa,YAAH,YAAGA,YAAY,CAAEE,MAAjB,EAAwB;AACtBF,QAAAA,YAAY,CAACE,MAAb;AACD,OAFD,MAEM;AACJd,QAAAA,UAAU,CAACe,mBAAX,CAA+B,QAA/B,EAAyC,YAAI;AAC3C,cAAMhB,MAAM,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAf;AACAU,UAAAA,QAAQ,CAACZ,MAAD,CAAR;AACD,SAHD;AAID;AACF,KATD;AAUD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SAAOU,WAAW,CAACF,QAAZ,KAAyB,IAAzB,GAAgC,UAAhC,GAA6C,WAApD;AACD","sourcesContent":["import { useEffect, useState, useCallback } from 'react';\nimport { Dimensions } from 'react-native';\n\nconst screen = Dimensions.get('window');\n\nexport function useDeviceOrientation() {\n  const isOrientationPortrait = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => height >= width;\n  const isOrientationLandscape = ({\n    width,\n    height,\n  }: {\n    width: number;\n    height: number;\n  }) => width >= height;\n\n  const [orientation, setOrientation] = useState({\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  });\n\n  const onChange = useCallback((screen) => {\n    setOrientation({\n      portrait: isOrientationPortrait(screen),\n      landscape: isOrientationLandscape(screen),\n    });\n  }, []);\n\n  useEffect(() => {\n    const susbcription = Dimensions.addEventListener('change', () => {\n      const screen = Dimensions.get('window');\n      onChange(screen);\n    });\n\n    return () => {\n      if(susbcription?.remove){\n        susbcription.remove();\n      }else {\n        Dimensions.removeEventListener('change', ()=>{\n          const screen = Dimensions.get('window');\n          onChange(screen);\n        });  \n      }\n    };\n  }, []);\n\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}\n"]},"metadata":{},"sourceType":"module"}