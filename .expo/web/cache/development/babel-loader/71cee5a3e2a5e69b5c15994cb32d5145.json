{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PetCard } from \"../components/PetCard\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { ref, getDownloadURL } from \"firebase/storage\";\nimport { collection, query, getDocs, orderBy } from \"firebase/firestore\";\nimport React, { useEffect, useState } from 'react';\nimport { storage, db } from \"../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function PetCardFlatList() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      petPostDataArray = _useState2[0],\n      setpetPostDataArray = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var getData = function getData() {\n    var qquery, querySnapshot;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            qquery = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"));\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDocs(qquery));\n\n          case 3:\n            querySnapshot = _context.sent;\n            querySnapshot.forEach(function (doc) {\n              getDownloadURL(ref(storage, doc.data()['imagepath'])).then(function (url) {\n                var newjson = {\n                  id: doc.id,\n                  imagepath: url,\n                  petname: doc.data()['petname'],\n                  petgender: doc.data()['petgender'],\n                  petstages: doc.data()['petstages'],\n                  desc: doc.data()['desc']\n                };\n                setpetPostDataArray(function (oldArray) {\n                  return [].concat(_toConsumableArray(oldArray), [newjson]);\n                });\n              }).catch(function (error) {});\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getData();\n    setIsLoading(false);\n  }, []);\n  return _jsx(_Fragment, {\n    children: isLoading ? _jsx(ActivityIndicator, {\n      size: \"large\"\n    }) : _jsx(FlatList, {\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      data: petPostDataArray,\n      renderItem: PetCard,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/components/PetCardFlatList.tsx"],"names":["PetCard","ref","getDownloadURL","collection","query","getDocs","orderBy","React","useEffect","useState","storage","db","PetCardFlatList","petPostDataArray","setpetPostDataArray","isLoading","setIsLoading","getData","qquery","querySnapshot","forEach","doc","data","then","url","newjson","id","imagepath","petname","petgender","petstages","desc","oldArray","catch","error","item"],"mappings":";;;AAAA,SAASA,OAAT;;;AAEA,SAASC,GAAT,EAAcC,cAAd,QAAoC,kBAApC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA+CC,OAA/C,EAAwDC,OAAxD,QAAuE,oBAAvE;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,OAAT,EAAkBC,EAAlB;;;AAEA,OAAO,SAASC,eAAT,GAA2B;AAC9B,kBAAgDH,QAAQ,CAAqB,EAArB,CAAxD;AAAA;AAAA,MAAOI,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,mBAAkCL,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,MADM,GACGd,KAAK,CAACD,UAAU,CAACQ,EAAD,EAAK,SAAL,CAAX,EAA4BL,OAAO,CAAC,YAAD,EAAe,MAAf,CAAnC,CADR;AAAA;AAAA,6CAEgBD,OAAO,CAACa,MAAD,CAFvB;;AAAA;AAENC,YAAAA,aAFM;AAGZA,YAAAA,aAAa,CAACC,OAAd,CAAsB,UAACC,GAAD,EAAS;AAC3BnB,cAAAA,cAAc,CAACD,GAAG,CAACS,OAAD,EAAUW,GAAG,CAACC,IAAJ,GAAW,WAAX,CAAV,CAAJ,CAAd,CACKC,IADL,CACU,UAACC,GAAD,EAAS;AAEX,oBAAMC,OAAO,GAAG;AACZC,kBAAAA,EAAE,EAAEL,GAAG,CAACK,EADI;AAEZC,kBAAAA,SAAS,EAAEH,GAFC;AAGZI,kBAAAA,OAAO,EAAEP,GAAG,CAACC,IAAJ,GAAW,SAAX,CAHG;AAIZO,kBAAAA,SAAS,EAAER,GAAG,CAACC,IAAJ,GAAW,WAAX,CAJC;AAKZQ,kBAAAA,SAAS,EAAET,GAAG,CAACC,IAAJ,GAAW,WAAX,CALC;AAMZS,kBAAAA,IAAI,EAAEV,GAAG,CAACC,IAAJ,GAAW,MAAX;AANM,iBAAhB;AASAR,gBAAAA,mBAAmB,CAAC,UAAAkB,QAAQ;AAAA,sDAAQA,QAAR,IAAkBP,OAAlB;AAAA,iBAAT,CAAnB;AACH,eAbL,EAcKQ,KAdL,CAcW,UAACC,KAAD,EAAW,CACjB,CAfL;AAgBH,aAjBD;;AAHY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAuBA1B,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,OAAO;AACPD,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GAJQ,EAIN,EAJM,CAAT;AAMA,SACI;AAAA,cACKD,SAAS,GACN,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC;AAAxB,MADM,GAEN,KAAC,QAAD;AACI,MAAA,4BAA4B,EAAE,KADlC;AAEI,MAAA,8BAA8B,EAAE,KAFpC;AAGI,MAAA,IAAI,EAAEF,gBAHV;AAII,MAAA,UAAU,EAAEb,OAJhB;AAKI,MAAA,YAAY,EAAE,sBAAAmC,IAAI;AAAA,eAAIA,IAAI,CAACT,EAAT;AAAA;AALtB;AAHR,IADJ;AAmBH","sourcesContent":["import { PetCard } from '../components/PetCard';\r\nimport { StyleSheet, FlatList, ActivityIndicator, View } from 'react-native';\r\nimport { ref, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, query, where, onSnapshot, getDocs, orderBy } from \"firebase/firestore\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingStackProps, petPostDataProps } from '../types';\r\nimport { storage, db } from \"../firebase\";\r\n\r\nexport function PetCardFlatList() {\r\n    const [petPostDataArray, setpetPostDataArray] = useState<petPostDataProps[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const getData = async () => {\r\n        const qquery = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"));\r\n        const querySnapshot = await getDocs(qquery);\r\n        querySnapshot.forEach((doc) => {\r\n            getDownloadURL(ref(storage, doc.data()['imagepath']))\r\n                .then((url) => {\r\n\r\n                    const newjson = {\r\n                        id: doc.id,\r\n                        imagepath: url,\r\n                        petname: doc.data()['petname'],\r\n                        petgender: doc.data()['petgender'],\r\n                        petstages: doc.data()['petstages'],\r\n                        desc: doc.data()['desc']\r\n                    }\r\n                    //console.log(doc.data()['createdate'], newjson);\r\n                    setpetPostDataArray(oldArray => [...oldArray, newjson]);\r\n                })\r\n                .catch((error) => {\r\n                });\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        setIsLoading(false)\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ?\r\n                <ActivityIndicator size=\"large\" /> :\r\n                <FlatList\r\n                    showsVerticalScrollIndicator={false}\r\n                    showsHorizontalScrollIndicator={false}\r\n                    data={petPostDataArray}\r\n                    renderItem={PetCard}\r\n                    keyExtractor={item => item.id}\r\n                />\r\n\r\n\r\n\r\n            }\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}