{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\nexport default {\n  addEventListener: function addEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function canOpenURL(url) {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", true);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getInitialURL: function getInitialURL() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (Platform.isDOMAvailable) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", '');\n\n            case 2:\n              return _context2.abrupt(\"return\", window.location.href);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  openURL: function openURL(url) {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (Platform.isDOMAvailable) {\n                window.location = new URL(url, window.location).toString();\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAIA,IAAMC,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAMC,SAAS,GAAmE,EAAlF;AAEA,eAAe;AACbC,kBADa,4BACIC,IADJ,EACiBC,QADjB,EACsC;AACjDL,aAAS,CACPC,UAAU,CAACK,OAAX,CAAmBF,IAAnB,MAA6B,CAAC,CADvB,mCAEwBA,IAFxB,2BAAT;;AAIA,QAAMG,cAAc,GAAsB,SAApCA,cAAoC,CAACC,WAAD;AAAA,aACxCH,QAAQ,CAAC;AAAEI,WAAG,EAAEC,MAAM,CAACC,QAAP,CAAgBC,IAAvB;AAA6BJ,mBAAW,EAAXA;AAA7B,OAAD,CADgC;AAAA,KAA1C;;AAEAN,aAAS,CAACW,IAAV,CAAe;AAAER,cAAQ,EAARA,QAAF;AAAYE,oBAAc,EAAdA;AAAZ,KAAf;AACAG,UAAM,CAACP,gBAAP,CAAwB,SAAxB,EAAmCI,cAAnC,EAAmD,KAAnD;AACD,GAVY;AAYbO,qBAZa,+BAYOV,IAZP,EAYoBC,QAZpB,EAYyC;AACpDL,aAAS,CACPC,UAAU,CAACK,OAAX,CAAmBF,IAAnB,MAA6B,CAAC,CADvB,sCAE2BA,IAF3B,4BAAT;AAIA,QAAMW,aAAa,GAAGb,SAAS,CAACc,SAAV,CAAoB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACZ,QAAL,KAAkBA,QAA5B;AAAA,KAApB,CAAtB;AACAL,aAAS,CACPe,aAAa,KAAK,CAAC,CADZ,EAEP,8EAFO,CAAT;AAIA,QAAMR,cAAc,GAAGL,SAAS,CAACa,aAAD,CAAT,CAAyBR,cAAhD;AACAG,UAAM,CAACI,mBAAP,CAA2B,SAA3B,EAAsCP,cAAtC,EAAsD,KAAtD;AACAL,aAAS,CAACgB,MAAV,CAAiBH,aAAjB,EAAgC,CAAhC;AACD,GAzBY;AA2BPI,YA3BO,sBA2BIV,GA3BJ,EA2Be;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEnB,IAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG3B,GA9BY;AAgCPW,eAhCO,2BAgCM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACZrB,QAAQ,CAACsB,cADG;AAAA;AAAA;AAAA;;AAAA,gDACoB,EADpB;;AAAA;AAAA,gDAEVX,MAAM,CAACC,QAAP,CAAgBC,IAFN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGlB,GAnCY;AAqCPU,SArCO,mBAqCCb,GArCD,EAqCY;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB,kBAAIV,QAAQ,CAACsB,cAAb,EAA6B;AAE3BX,sBAAM,CAACC,QAAP,GAAkB,IAAIY,GAAJ,CAAQd,GAAR,EAAaC,MAAM,CAACC,QAApB,EAA8Ba,QAA9B,EAAlB;AACD;;AAJsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxB;AA1CY,CAAf","names":["Platform","invariant","EventTypes","listeners","addEventListener","type","listener","indexOf","nativeListener","nativeEvent","url","window","location","href","push","removeEventListener","listenerIndex","findIndex","pair","splice","canOpenURL","getInitialURL","isDOMAvailable","openURL","URL","toString"],"sourceRoot":"","sources":["../src/ExpoLinking.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}