{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Button, Input } from 'react-native-elements';\nimport React, { useState } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Picker } from '@react-native-community/picker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CreatePostScreen() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      open = _useState4[0],\n      setOpen = _useState4[1];\n\n  var _useState5 = useState(\"Male\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      genderValue = _useState6[0],\n      setGenderValue = _useState6[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Input, {\n      style: styles.input,\n      label: \"Pet Name:\"\n    }), _jsx(Input, {\n      style: styles.input,\n      label: \"Pet Age:\"\n    }), _jsx(Input, {\n      style: styles.input,\n      label: \"Pet Description:\"\n    }), _jsx(Input, {\n      style: styles.input,\n      label: \"Pet Name\"\n    }), _jsxs(Picker, {\n      selectedValue: genderValue,\n      style: {\n        height: 50,\n        width: 100,\n        borderColor: 'white'\n      },\n      onValueChange: function onValueChange(itemValue, itemIndex) {\n        setGenderValue(itemValue);\n        console.log(itemValue, itemIndex);\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Male\",\n        value: \"male\"\n      }), _jsx(Picker.Item, {\n        label: \"Female\",\n        value: \"female\"\n      })]\n    }), _jsxs(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsx(Button, {\n        title: \"Pick an image from camera roll\",\n        onPress: pickImage\n      }), image != \"\" && _jsx(Image, {\n        source: {\n          uri: image\n        },\n        style: {\n          width: 200,\n          height: 200\n        }\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    padding: 20,\n    backgroundColor: 'white'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  input: {\n    fontSize: 12\n  },\n  CardContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'flex-start',\n    borderRadius: 25,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: '#dddddd',\n    marginVertical: 15\n  },\n  imageitem: {\n    aspectRatio: 0.95,\n    width: 100,\n    borderRadius: 25\n  }\n});","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/screens/CreatePostScreen.tsx"],"names":["Button","Input","React","useState","ImagePicker","Picker","CreatePostScreen","image","setImage","open","setOpen","genderValue","setGenderValue","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","cancelled","uri","styles","container","input","height","width","borderColor","itemValue","itemIndex","console","log","flex","alignItems","justifyContent","StyleSheet","create","padding","backgroundColor","title","fontSize","fontWeight","separator","marginVertical","CardContainer","flexDirection","flexWrap","borderRadius","borderWidth","imageitem","aspectRatio"],"mappings":"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","sourcesContent":["import { StyleSheet, View, Image } from 'react-native';\nimport { SettingStackProps, petPostDataProps } from '../types';\nimport { Button, ButtonGroup, withTheme, Text, Input } from 'react-native-elements';\nimport { storage, db } from \"../firebase\";\nimport React, { useEffect, useState } from 'react';\nimport { ref, getDownloadURL } from \"firebase/storage\";\nimport { collection, query, where, onSnapshot, getDocs } from \"firebase/firestore\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Picker } from '@react-native-community/picker';\n\n\nexport default function CreatePostScreen() {\n  const [image, setImage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [genderValue, setGenderValue] = useState(\"Male\");\n  const pickImage = async () => {\n    // No permissions request is necessary for launching the image library\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n\n      <Input style={styles.input} label='Pet Name:' />\n      <Input style={styles.input} label='Pet Age:' />\n      <Input style={styles.input} label='Pet Description:' />\n      <Input style={styles.input} label='Pet Name' />\n\n      <Picker\n        selectedValue={genderValue}\n        style={{ height: 50, width: 100, borderColor: 'white' }}\n        onValueChange={(itemValue, itemIndex) => {\n          setGenderValue(itemValue)\n          console.log(itemValue, itemIndex)\n        }\n\n        }>\n        <Picker.Item label=\"Male\" value=\"male\" />\n        <Picker.Item label=\"Female\" value=\"female\" />\n      </Picker>\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n        {image != \"\" && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n      </View>\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n    padding: 20,\n    backgroundColor: 'white'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  input: {\n    fontSize: 12\n  },\n  CardContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'flex-start', // if you want to fill rows left to right\n    borderRadius: 25,\n    padding: 10,\n    borderWidth: 1,\n    borderColor: '#dddddd',\n    marginVertical: 15,\n  },\n  imageitem: {\n    aspectRatio: 0.95,\n    width: 100,\n    borderRadius: 25,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}