{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\", \"sceneContainerStyle\"],\n    _excluded2 = [\"lazy\", \"tabBarOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport BottomTabView from \"../views/BottomTabView\";\n\nfunction BottomTabNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n\n  var lazy = restWithDeprecated.lazy,\n      tabBarOptions = restWithDeprecated.tabBarOptions,\n      rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n\n  var defaultScreenOptions = {};\n\n  if (tabBarOptions) {\n    var _tabBarOptions$labelP;\n\n    _extends2(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition: (_tabBarOptions$labelP = tabBarOptions.labelPosition) !== null && _tabBarOptions$labelP !== void 0 ? _tabBarOptions$labelP : tabBarOptions.adaptive === false ? 'below-icon' : undefined,\n      tabBarStyle: [{\n        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'\n      }, defaultScreenOptions.tabBarStyle]\n    });\n\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, \"Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.\");\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.\");\n  }\n\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n    initialRouteName: initialRouteName,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(BottomTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    sceneContainerStyle: sceneContainerStyle\n  })));\n}\n\nexport default createNavigatorFactory(BottomTabNavigator);","map":{"version":3,"mappings":"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","names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","BottomTabView","BottomTabNavigator","initialRouteName","backBehavior","children","screenListeners","screenOptions","sceneContainerStyle","restWithDeprecated","lazy","tabBarOptions","rest","defaultScreenOptions","Object","tabBarHideOnKeyboard","keyboardHidesTabBar","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarActiveBackgroundColor","activeBackgroundColor","tabBarInactiveBackgroundColor","inactiveBackgroundColor","tabBarAllowFontScaling","allowFontScaling","tabBarShowLabel","showLabel","tabBarLabelStyle","labelStyle","tabBarIconStyle","iconStyle","tabBarItemStyle","tabStyle","tabBarLabelPosition","labelPosition","adaptive","undefined","tabBarStyle","display","tabBarVisible","keys","forEach","key","JSON","stringify","state","descriptors","navigation","NavigationContent"],"sources":["createBottomTabNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationEventMap,\n  BottomTabNavigationOptions,\n} from '../types';\nimport BottomTabView from '../views/BottomTabView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap\n> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  sceneContainerStyle,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: tabBarOptions is deprecated\n    tabBarOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: BottomTabNavigationOptions = {};\n\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,\n      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarLabelPosition:\n        tabBarOptions.labelPosition ??\n        (tabBarOptions.adaptive === false ? 'below-icon' : undefined),\n      tabBarStyle: [\n        { display: tabBarOptions.tabBarVisible ? 'none' : 'flex' },\n        defaultScreenOptions.tabBarStyle,\n      ],\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof BottomTabNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      tabBarOptions,\n      `Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      TabActionHelpers<ParamListBase>,\n      BottomTabNavigationOptions,\n      BottomTabNavigationEventMap\n    >(TabRouter, {\n      initialRouteName,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <BottomTabView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        sceneContainerStyle={sceneContainerStyle}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"]},"metadata":{},"sourceType":"module"}