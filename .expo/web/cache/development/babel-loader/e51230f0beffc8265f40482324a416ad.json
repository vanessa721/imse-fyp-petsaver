{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Dropdown } from 'react-native-element-dropdown';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar DropdownScreen = function DropdownScreen(props) {\n  var _useState = useState(props.initvalue),\n      _useState2 = _slicedToArray(_useState, 2),\n      dropdown = _useState2[0],\n      setDropdown = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  useEffect(function () {\n    setDropdown(props.initvalue);\n  }, []);\n\n  var _renderItem = function _renderItem(item) {\n    return _jsxs(View, {\n      style: styles.item,\n      children: [_jsx(Text, {\n        style: styles.textItem,\n        children: item.label\n      }), _jsx(Image, {\n        style: styles.icon,\n        source: require(\"../assets/images/icon.png\")\n      })]\n    });\n  };\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Dropdown, {\n      style: styles.dropdown,\n      containerStyle: styles.shadow,\n      data: props.data,\n      labelField: \"label\",\n      valueField: \"value\",\n      placeholder: props.initvalue ? props.initvalue : 'Select a value',\n      value: dropdown,\n      maxHeight: 112,\n      onChange: function onChange(item) {\n        setDropdown(item.value);\n        props.setValue(item.value);\n      },\n      renderItem: function renderItem(item) {\n        return _renderItem(item);\n      }\n    })\n  });\n};\n\nexport default DropdownScreen;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white'\n  },\n  dropdown: {\n    backgroundColor: 'white',\n    borderBottomColor: '#aaaaaa',\n    borderBottomWidth: 0.5\n  },\n  icon: {\n    marginRight: 5,\n    width: 18,\n    height: 18\n  },\n  item: {\n    paddingVertical: 17,\n    paddingHorizontal: 4,\n    backgroundColor: '#F0FFFF'\n  },\n  textItem: {\n    fontSize: 16\n  },\n  shadow: {\n    shadowColor: '#aaaaaa',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 1.41,\n    elevation: 2\n  }\n});","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/components/dropdown.tsx"],"names":["React","useState","useEffect","Dropdown","DropdownScreen","props","initvalue","dropdown","setDropdown","selected","setSelected","_renderItem","item","styles","textItem","label","icon","require","container","shadow","data","value","setValue","StyleSheet","create","backgroundColor","borderBottomColor","borderBottomWidth","marginRight","width","height","paddingVertical","paddingHorizontal","fontSize","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View, Text, Image } from 'react-native';\r\nimport { Dropdown, MultiSelect } from 'react-native-element-dropdown';\r\n\r\n\r\nconst DropdownScreen = (props: any) => {\r\n    const [dropdown, setDropdown] = useState(props.initvalue);\r\n    const [selected, setSelected] = useState([]);\r\n    useEffect(() => {\r\n        setDropdown(props.initvalue)\r\n\r\n    }, []);\r\n    const _renderItem = (item: { label: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => {\r\n        return (\r\n            <View style={styles.item}>\r\n                <Text style={styles.textItem}>{item.label}</Text>\r\n                <Image style={styles.icon} source={require('../assets/images/icon.png')} />\r\n            </View>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Dropdown\r\n                style={styles.dropdown}\r\n                containerStyle={styles.shadow}\r\n                data={props.data}\r\n                labelField=\"label\"\r\n                valueField=\"value\"\r\n                placeholder={props.initvalue ? props.initvalue : 'Select a value'}\r\n                value={dropdown}\r\n                maxHeight={112}\r\n                onChange={item => {\r\n                    setDropdown(item.value);\r\n                    props.setValue(item.value)\r\n                }}\r\n                renderItem={item => _renderItem(item)}\r\n            // renderLeftIcon={() => (\r\n            //     <Image style={styles.icon} source={require('../assets/images/icon.png')} />\r\n            // )}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default DropdownScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: 'white',\r\n    },\r\n    dropdown: {\r\n        backgroundColor: 'white',\r\n        borderBottomColor: '#aaaaaa',\r\n        borderBottomWidth: 0.5,\r\n\r\n    },\r\n    icon: {\r\n        marginRight: 5,\r\n        width: 18,\r\n        height: 18,\r\n    },\r\n    item: {\r\n        paddingVertical: 17,\r\n        paddingHorizontal: 4,\r\n        backgroundColor: '#F0FFFF'\r\n    },\r\n    textItem: {\r\n        fontSize: 16,\r\n    },\r\n    shadow: {\r\n        shadowColor: '#aaaaaa',\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 1,\r\n        },\r\n        shadowOpacity: 0.2,\r\n        shadowRadius: 1.41,\r\n        elevation: 2,\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}