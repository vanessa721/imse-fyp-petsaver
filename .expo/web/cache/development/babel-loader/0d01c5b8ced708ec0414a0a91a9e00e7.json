{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"maskElement\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RNCMaskedView = requireNativeComponent('RNCMaskedView');\n\nvar MaskedView = function (_React$Component) {\n  _inherits(MaskedView, _React$Component);\n\n  var _super = _createSuper(MaskedView);\n\n  function MaskedView() {\n    var _this;\n\n    _classCallCheck(this, MaskedView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._hasWarnedInvalidRenderMask = false;\n    return _this;\n  }\n\n  _createClass(MaskedView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          maskElement = _this$props.maskElement,\n          children = _this$props.children,\n          otherViewProps = _objectWithoutProperties(_this$props, _excluded);\n\n      if (!React.isValidElement(maskElement)) {\n        if (!this._hasWarnedInvalidRenderMask) {\n          console.warn('MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' + 'Expected a React Element. No mask will render.');\n          this._hasWarnedInvalidRenderMask = true;\n        }\n\n        return _jsx(View, _objectSpread(_objectSpread({}, otherViewProps), {}, {\n          children: children\n        }));\n      }\n\n      return _jsxs(RNCMaskedView, _objectSpread(_objectSpread({}, otherViewProps), {}, {\n        children: [_jsx(View, {\n          pointerEvents: \"none\",\n          style: StyleSheet.absoluteFill,\n          children: maskElement\n        }), children]\n      }));\n    }\n  }]);\n\n  return MaskedView;\n}(React.Component);\n\nexport { MaskedView as default };","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/node_modules/@react-native-community/masked-view/js/MaskedView.js"],"names":["React","requireNativeComponent","RNCMaskedView","MaskedView","_hasWarnedInvalidRenderMask","props","maskElement","children","otherViewProps","isValidElement","console","warn","StyleSheet","absoluteFill","Component"],"mappings":";;;;;;;;;;;;;;;;;AAUA,OAAOA,KAAP,MAAkB,OAAlB;;;SAC2BC,sB;;;AAE3B,IAAMC,aAAa,GAAGD,sBAAsB,CAAM,eAAN,CAA5C;;IAyCqBE,U;;;;;;;;;;;;;;;UACnBC,2B,GAA8B,K;;;;;;WAE9B,kBAAS;AACP,wBAAqD,KAAKC,KAA1D;AAAA,UAAQC,WAAR,eAAQA,WAAR;AAAA,UAAqBC,QAArB,eAAqBA,QAArB;AAAA,UAAkCC,cAAlC;;AAEA,UAAI,CAACR,KAAK,CAACS,cAAN,CAAqBH,WAArB,CAAL,EAAwC;AACtC,YAAI,CAAC,KAAKF,2BAAV,EAAuC;AACrCM,UAAAA,OAAO,CAACC,IAAR,CACE,sEACE,gDAFJ;AAIA,eAAKP,2BAAL,GAAmC,IAAnC;AACD;;AAED,eAAO,KAAC,IAAD,kCAAUI,cAAV;AAAA,oBAA2BD;AAA3B,WAAP;AACD;;AAED,aACE,MAAC,aAAD,kCAAmBC,cAAnB;AAAA,mBACE,KAAC,IAAD;AAAM,UAAA,aAAa,EAAC,MAApB;AAA2B,UAAA,KAAK,EAAEI,UAAU,CAACC,YAA7C;AAAA,oBACGP;AADH,UADF,EAIGC,QAJH;AAAA,SADF;AAQD;;;;EA1BqCP,KAAK,CAACc,S;;SAAzBX,U","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport React from 'react';\nimport { View, StyleSheet, requireNativeComponent } from 'react-native';\n\nconst RNCMaskedView = requireNativeComponent<any>('RNCMaskedView');\n\nimport { type MaskedViewProps } from './MaskedViewTypes';\n\n/**\n * Renders the child view with a mask specified in the `maskElement` prop.\n *\n * ```\n * import React from 'react';\n * import { Text, View } from 'react-native';\n * import MaskedView from 'react-native-masked-view';\n *\n * class MyMaskedView extends React.Component {\n *   render() {\n *     return (\n *       <MaskedView\n *         style={{ flex: 1 }}\n *         maskElement={\n *           <View style={styles.maskContainerStyle}>\n *             <Text style={styles.maskTextStyle}>\n *               Basic Mask\n *             </Text>\n *           </View>\n *         }\n *       >\n *         <View style={{ flex: 1, backgroundColor: 'blue' }} />\n *       </MaskedView>\n *     );\n *   }\n * }\n * ```\n *\n * The above example will render a view with a blue background that fills its\n * parent, and then mask that view with text that says \"Basic Mask\".\n *\n * The alpha channel of the view rendered by the `maskElement` prop determines how\n * much of the view's content and background shows through. Fully or partially\n * opaque pixels allow the underlying content to show through but fully\n * transparent pixels block that content.\n *\n */\nexport default class MaskedView extends React.Component<MaskedViewProps> {\n  _hasWarnedInvalidRenderMask = false;\n\n  render() {\n    const { maskElement, children, ...otherViewProps } = this.props;\n\n    if (!React.isValidElement(maskElement)) {\n      if (!this._hasWarnedInvalidRenderMask) {\n        console.warn(\n          'MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' +\n            'Expected a React Element. No mask will render.',\n        );\n        this._hasWarnedInvalidRenderMask = true;\n      }\n      // $FlowFixMe\n      return <View {...otherViewProps}>{children}</View>;\n    }\n\n    return (\n      <RNCMaskedView {...otherViewProps}>\n        <View pointerEvents=\"none\" style={StyleSheet.absoluteFill}>\n          {maskElement}\n        </View>\n        {children}\n      </RNCMaskedView>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}