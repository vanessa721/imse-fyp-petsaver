{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { collection, query, where, onSnapshot, orderBy, doc } from \"firebase/firestore\";\nimport React, { useEffect, useState } from 'react';\nimport { db } from \"../firebase\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { PetRequestStatusCard } from \"./PetRequestStatusCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function PetRequestStatusFlatList(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      petPostDataArray = _useState2[0],\n      setpetPostDataArray = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var getData = function getData() {\n    var q, unsubscribe;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (props.filter_column != '') {\n              console.log(props.filter_column, props.filter_value);\n              q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"), where(props.filter_column, \"==\", props.filter_value));\n            } else {\n              q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"));\n            }\n\n            unsubscribe = onSnapshot(q, function (querySnapshot) {\n              setpetPostDataArray([]);\n              console.log(querySnapshot);\n              querySnapshot.forEach(function (docSnap) {\n                console.log(\"doc.data().contactRequest:\", docSnap.data().contactRequest);\n                var postRef = doc(db, \"PetPost\", docSnap.id);\n                var requestRef = collection(postRef, \"contactRequest\");\n                var q2 = query(requestRef, where(\"status\", \"==\", \"New request\"));\n                var requestId = [];\n                var unsubscribe2 = onSnapshot(q, function (querySnapshot) {\n                  querySnapshot.forEach(function (docSnap2) {\n                    requestId.push(docSnap2.id);\n                  });\n                  console.log(\"Current requestId: \", requestId.join(\", \"));\n                });\n                var newjson = {\n                  id: docSnap.id,\n                  imagepath: docSnap.data()['imagepath'],\n                  petname: docSnap.data()['petname'],\n                  petgender: docSnap.data()['petgender'],\n                  petstages: docSnap.data()['petstages'],\n                  desc: docSnap.data()['desc'],\n                  postcreator: docSnap.data()['postcreator']\n                };\n                setpetPostDataArray(function (oldArray) {\n                  return [].concat(_toConsumableArray(oldArray), [newjson]);\n                });\n              });\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getData();\n    setIsLoading(false);\n  }, []);\n  return _jsxs(_Fragment, {\n    children: [isLoading && _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#298e96\"\n    }), _jsx(View, {\n      style: styles.uppergadient,\n      children: _jsx(LinearGradient, {\n        colors: ['white', 'rgba(255,255,255,0)'],\n        style: {\n          height: 40\n        }\n      })\n    }), _jsx(FlatList, {\n      showsVerticalScrollIndicator: false,\n      showsHorizontalScrollIndicator: false,\n      data: petPostDataArray,\n      renderItem: function renderItem(item) {\n        return PetRequestStatusCard(item, props.navigation);\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    }), _jsx(View, {\n      style: styles.lowergadient,\n      children: _jsx(LinearGradient, {\n        colors: ['rgba(255,255,255,0)', 'rgba(255,255,255,1)'],\n        style: {\n          height: 40\n        }\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  uppergadient: {\n    flex: 1,\n    backgroundColor: 'white',\n    top: 0,\n    width: '100%',\n    height: 40,\n    zIndex: 10\n  },\n  lowergadient: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n    height: 40\n  }\n});","map":{"version":3,"sources":["C:/Users/ZZ00UI738/Documents/van fyp/petsaver/components/PetRequestStatusFlatList.tsx"],"names":["collection","query","where","onSnapshot","orderBy","doc","React","useEffect","useState","db","LinearGradient","PetRequestStatusCard","PetRequestStatusFlatList","props","petPostDataArray","setpetPostDataArray","isLoading","setIsLoading","getData","filter_column","console","log","filter_value","q","unsubscribe","querySnapshot","forEach","docSnap","data","contactRequest","postRef","id","requestRef","q2","requestId","unsubscribe2","docSnap2","push","join","newjson","imagepath","petname","petgender","petstages","desc","postcreator","oldArray","styles","uppergadient","height","item","navigation","lowergadient","StyleSheet","create","flex","backgroundColor","top","width","zIndex","position","bottom"],"mappings":"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","sourcesContent":["\r\nimport { StyleSheet, FlatList, ActivityIndicator, View } from 'react-native';\r\nimport { ref, getDownloadURL } from \"firebase/storage\";\r\nimport { collection, query, where, onSnapshot, getDocs, orderBy, limit, doc } from \"firebase/firestore\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { SettingStackParamList, HomeStackProps, petPostDataProps } from '../types';\r\nimport { storage, db } from \"../firebase\";\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\r\nimport { PetRequestStatusCard } from './PetRequestStatusCard';\r\n\r\n\r\nexport function PetRequestStatusFlatList(this: any, props: PetRequestStatusFlatList) {\r\n    const [petPostDataArray, setpetPostDataArray] = useState<petPostDataProps[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const getData = async () => {\r\n        if (props.filter_column != '') {\r\n            console.log(props.filter_column, props.filter_value)\r\n            var q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"), where(props.filter_column, \"==\", props.filter_value));\r\n        } else {\r\n            var q = query(collection(db, \"PetPost\"), orderBy('createdate', \"desc\"));\r\n        }\r\n\r\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n            setpetPostDataArray([])\r\n            console.log(querySnapshot)\r\n            querySnapshot.forEach((docSnap) => {\r\n                console.log(\"doc.data().contactRequest:\", docSnap.data().contactRequest)\r\n\r\n                var postRef = doc(db, \"PetPost\", docSnap.id);\r\n                var requestRef = collection(postRef, \"contactRequest\");\r\n                const q2 = query(requestRef, where(\"status\", \"==\", \"New request\"));\r\n                const requestId: string[] = [];\r\n                const unsubscribe2 = onSnapshot(q, (querySnapshot) => {\r\n                    querySnapshot.forEach((docSnap2) => {\r\n                        requestId.push(docSnap2.id);\r\n                    });\r\n                    console.log(\"Current requestId: \", requestId.join(\", \"));\r\n                });\r\n\r\n                const newjson = {\r\n                    id: docSnap.id,\r\n                    imagepath: docSnap.data()['imagepath'],\r\n                    petname: docSnap.data()['petname'],\r\n                    petgender: docSnap.data()['petgender'],\r\n                    petstages: docSnap.data()['petstages'],\r\n                    desc: docSnap.data()['desc'],\r\n                    postcreator: docSnap.data()['postcreator']\r\n                }\r\n                //console.log(doc.data()['createdate'], newjson);\r\n                setpetPostDataArray(oldArray => [...oldArray, newjson]);\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        setIsLoading(false)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <ActivityIndicator size=\"large\" color='#298e96' />}\r\n            <View style={styles.uppergadient}>\r\n                <LinearGradient\r\n                    colors={['white', 'rgba(255,255,255,0)']}\r\n                    style={{ height: 40 }}\r\n                />\r\n            </View>\r\n            <FlatList\r\n                showsVerticalScrollIndicator={false}\r\n                showsHorizontalScrollIndicator={false}\r\n                data={petPostDataArray}\r\n                renderItem={(item) => PetRequestStatusCard(item, props.navigation)}\r\n                keyExtractor={item => item.id}\r\n            />\r\n            <View style={styles.lowergadient}>\r\n                <LinearGradient\r\n                    colors={['rgba(255,255,255,0)', 'rgba(255,255,255,1)']}\r\n                    style={{ height: 40 }}\r\n                />\r\n            </View>\r\n\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    uppergadient: {\r\n        flex: 1,\r\n        backgroundColor: 'white',\r\n        top: 0,\r\n        width: '100%',\r\n        height: 40,\r\n        zIndex: 10\r\n    },\r\n    lowergadient: {\r\n        flex: 1,\r\n        backgroundColor: 'transparent',\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        width: '100%',\r\n        height: 40\r\n    }\r\n});\r\n\r\ninterface PetRequestStatusFlatList {\r\n    filter_column: string,\r\n    filter_value: string | undefined,\r\n    navigation: NativeStackNavigationProp<SettingStackParamList, \"ViewMyPost\">\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}